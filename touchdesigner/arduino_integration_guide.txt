Arduino Integration Guide for Po Tolo V2.5.toe - UPDATED 2025

MODERN APPROACH: Serial DAT → Select DAT → JSON DAT
==================================================

This guide uses the latest TouchDesigner best practices for Arduino integration.
No complex scripting required - pure procedural data flow eliminates cook dependency loops.

STEP 1: Create Arduino Interface Component
==========================================

1. In your existing Po Tolo V2.5.toe project, create a new Base COMP called "arduino_interface"

2. Inside the arduino_interface COMP, add these nodes in sequence:

   a) Serial DAT:
      - Name: "serial_arduino"
      - Port: Set to your Arduino's COM port (e.g., COM3, COM4, /dev/cu.usbserial)
      - Baud Rate: 9600
      - Active: On
      - Timeout: 1000
      - Row/Callback Format: One Per Line
      - IMPORTANT: Leave all callbacks EMPTY (no Python scripts)

   b) Select DAT:
      - Name: "select_latest"
      - Connect: serial_arduino → select_latest
      - Configure EXACTLY as follows:
        
        ROWS Section:
        - Include First Row: OFF
        - Select Rows: by Index
        - Start Row Index: me.inputs[0].numRows-1 (gets latest row)
        - End Row Index: me.inputs[0].numRows-1 (same as start)
        - Row Select Values: + (enabled)
        - Row Select Condition: me.inputs[0].numRows-1
        - From Column: 0
        
        COLUMNS Section:
        - Include First Col: OFF
        - Select Cols: by Index
        - Start Col Index: 0
        - End Col Index: 0
        - Col Select Values: + (enabled)
        - Col Select Condition: (leave empty)
        - From Row: 0
        
        OUTPUT:
        - Output: Input Data

   c) JSON DAT:
      - Name: "json_sensor"
      - Connect: select_latest → json_sensor
      - Filter: $ (gets all JSON data)
      - Output: Expression

STEP 2: Arduino Code Setup
==========================

Your Arduino should send JSON in this format:
{"left":27,"right":189,"hands_detected":false}

AUDIO SYSTEM COMPATIBILITY:
- Main System (01_MAIN_SYSTEM): Full JSON output + theremin audio
- MiniMin Test: Proven theremin with vibrato + sensor data
- Musical Warm: Research-based warm sound (120-1500Hz range)
- Alien Effect: Experimental synthesized sounds

AUDIO QUALITY RESEARCH:
- Sine waves = warm, musical sound
- Triangle waves = tinny, harsh harmonics  
- 120-1500Hz = optimal musical frequency range
- Sources: Adafruit, Arduino.cc, audio physics research

STEP 3: Access Sensor Data in Effects
=====================================

Now you can directly use sensor data in your movie effects with simple expressions:

Basic Access:
- Left distance: op('arduino_interface/json_sensor').result['left']
- Right distance: op('arduino_interface/json_sensor').result['right']
- Hands detected: op('arduino_interface/json_sensor').result['hands_detected']

STEP 4: Create Distortion Effects
=================================

Example: Simple Transform Distortion
Add a Transform TOP to your movie content:

Scale X:
1.0 + (op('arduino_interface/json_sensor').result['left'] / 200.0) if op('arduino_interface/json_sensor').result['hands_detected'] else 1.0

Scale Y:
1.0 + (op('arduino_interface/json_sensor').result['right'] / 200.0) if op('arduino_interface/json_sensor').result['hands_detected'] else 1.0

Rotate Z:
(op('arduino_interface/json_sensor').result['left'] - op('arduino_interface/json_sensor').result['right']) * 0.5 if op('arduino_interface/json_sensor').result['hands_detected'] else 0

STEP 5: Advanced Effect Examples
===============================

Movie Playback Control:
- Speed: 1.0 + (op('arduino_interface/json_sensor').result['left'] / 100.0) if op('arduino_interface/json_sensor').result['hands_detected'] else 1.0

Opacity Control:
- Opacity: op('arduino_interface/json_sensor').result['hands_detected']

Color Mixing:
- Mix: op('arduino_interface/json_sensor').result['right'] / 200.0 if op('arduino_interface/json_sensor').result['hands_detected'] else 0.5

Displacement Effect:
Create Noise TOP → Displace TOP
- Displace X: op('arduino_interface/json_sensor').result['left'] / 50.0 if op('arduino_interface/json_sensor').result['hands_detected'] else 0
- Displace Y: op('arduino_interface/json_sensor').result['right'] / 50.0 if op('arduino_interface/json_sensor').result['hands_detected'] else 0

STEP 6: Conditional Effects Pattern
==================================

All effects should use this pattern to only activate when hands are detected:

BASIC CONDITIONAL:
your_value if op('arduino_interface/json_sensor').result['hands_detected'] else default_value

MATHEMATICAL GATING:
your_value * op('arduino_interface/json_sensor').result['hands_detected']

EXAMPLE EFFECT CHAIN:
[Movie File In] → [Transform TOP] → [Displace TOP] → [Output]

Where Transform and Displace are controlled by sensor data only when hands are detected.

STEP 7: Testing the Setup
=========================

1. Upload sensors_ws2815.ino to your Arduino with WS2815 LED strip
2. Open TouchDesigner and your Po Tolo project
3. Check Serial DAT shows incoming JSON data
4. Verify Select DAT shows single latest JSON line
5. Confirm JSON DAT parses without errors
6. Test effects respond to sensor movement only when hands detected

STEP 8: Troubleshooting
======================

- No data in Serial DAT: Check COM port, baud rate, and Arduino power
- "Failed to parse DAT as JSON" error: Check Select DAT configuration
- Cook dependency loop errors: Ensure NO callbacks in Serial DAT
- Values not updating: Verify Select DAT uses me.inputs[0].numRows-1
- LED strip not working: Check WS2815 power supply and data pin connection

DATA FLOW DIAGRAM:
=================

Arduino → Serial DAT → Select DAT → JSON DAT → Movie Effects
            ↓              ↓            ↓
         Raw JSON     Latest Line   Parsed Data
                      Only         Available

ADVANTAGES OF THIS APPROACH:
===========================

✅ No cook dependency loops
✅ No complex Python scripting
✅ Visual data flow you can debug
✅ Real-time performance optimized
✅ Easy to modify and extend
✅ Works with TouchDesigner's procedural nature

This modern approach follows TouchDesigner best practices and eliminates
the common issues with callback-based JSON parsing. 